"""
Django settings for saia project.

Generated by 'django-admin startproject' using Django 5.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os.path
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5tjzee$n9p6a!x=ral*-5&ngk@#!lkov0l3!=*p6v)nsx7c3u1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environ.Env().bool('DEBUG', default=False)

ALLOWED_HOSTS = environ.Env().list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# Security Settings for Production
if not DEBUG:
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
# Application definition

# Phoenix observability setup
import os

# Check if we should use Phoenix Cloud or local instance
if not os.environ.get("PHOENIX_API_KEY"):
    # Launch local Phoenix instance with proper port management
    try:
        import phoenix as px
        # Check if Phoenix is already running on port 6006
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 6006))
        sock.close()

        if result != 0:  # Port is available
            # Disable gRPC server to avoid port conflicts
            os.environ['PHOENIX_GRPC_PORT'] = '0'  # Disable gRPC
            px.launch_app()
            print("Phoenix launched locally at http://localhost:6006")
        else:
            print("Phoenix already running at http://localhost:6006")
    except ImportError:
        print("Phoenix not available - install with: pip install arize-phoenix")
    except Exception as e:
        print(f"Phoenix setup warning: {e}")

# Configure Phoenix tracing
try:
    from phoenix.otel import register

    tracer_provider = register(
        project_name=environ.Env().str('PHOENIX_PROJECT_NAME', default='saia-business-system'),
        endpoint=environ.Env().str('PHOENIX_COLLECTOR_ENDPOINT', default='http://localhost:6006')
    )

    # Instrument LangChain specifically
    from openinference.instrumentation.langchain import LangChainInstrumentor
    LangChainInstrumentor().instrument(tracer_provider=tracer_provider)

    print("Phoenix tracing configured successfully")
except ImportError as e:
    print(f"Phoenix instrumentation not available: {e}")
except Exception as e:
    print(f"Phoenix setup error: {e}")

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_ai_assistant',
    'django_htmx',
    'saia',  # Add saia app for management commands
    'users',
    'product',
    'project',
    'company',
    'invoice',
    'widget',  # Multi-tenant website chatbot app

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_htmx.middleware.HtmxMiddleware",
    # "saia.middleware.HtmxMessageMiddleware",
]

AUTH_USER_MODEL = "users.User"

ROOT_URLCONF = 'saia.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'saia.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Multiple Database Configuration
DATABASES = {
    # SAIA System Database (for Django tables, users, sessions, etc.)
    'default': {
        'ENGINE': environ.Env().str('DB_ENGINE', default='django.db.backends.postgresql'),
        'NAME': environ.Env().str('DB_NAME', default='saia_db'),
        'USER': environ.Env().str('DB_USER', default='saia_user'),
        'PASSWORD': environ.Env().str('DB_PASSWORD', default='saia_password_2024'),
        'HOST': environ.Env().str('DB_HOST', default='localhost'),
        'PORT': environ.Env().str('DB_PORT', default='5432'),
        'OPTIONS': {
            'connect_timeout': 60,
        }
    },
    # Client Data Source Database (Read-Only MySQL)
    'client_data': {
        'ENGINE': environ.Env().str('CLIENT_DB_ENGINE', default='django.db.backends.mysql'),
        'NAME': environ.Env().str('CLIENT_DB_NAME', default='client_database_name'),
        'USER': environ.Env().str('CLIENT_DB_USER', default='readonly_user'),
        'PASSWORD': environ.Env().str('CLIENT_DB_PASSWORD', default='readonly_password'),
        'HOST': environ.Env().str('CLIENT_DB_HOST', default='client_db_host'),
        'PORT': environ.Env().str('CLIENT_DB_PORT', default='3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        }
    }
}

# Database Router Configuration
DATABASE_ROUTERS = ['saia.database_router.SAIADatabaseRouter']

# Cache configuration for rate limiting and session management
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'saia-cache',
        'TIMEOUT': 3600,  # 1 hour default timeout
        'OPTIONS': {
            'MAX_ENTRIES': 10000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# Widget API Security Settings
WIDGET_ALLOWED_ORIGINS = ['*']  # Configure specific origins in production
WIDGET_RATE_LIMITING_ENABLED = True


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Riyadh'

USE_I18N = True

USE_TZ = True

# Suppress URL namespace warnings for django_ai_assistant
SILENCED_SYSTEM_CHECKS = ['urls.W005']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# SECURITY CRITICAL: Custom AI Assistant Permissions for Context Separation
AI_ASSISTANT_INIT_API_FN = "django_ai_assistant.api.views.init_api"
AI_ASSISTANT_CAN_CREATE_THREAD_FN = "saia.permissions.ai_assistant_can_create_thread"
AI_ASSISTANT_CAN_VIEW_THREAD_FN = "saia.permissions.ai_assistant_can_view_thread"
AI_ASSISTANT_CAN_UPDATE_THREAD_FN = "saia.permissions.ai_assistant_can_update_thread"
AI_ASSISTANT_CAN_DELETE_THREAD_FN = "saia.permissions.ai_assistant_can_delete_thread"
AI_ASSISTANT_CAN_CREATE_MESSAGE_FN = "saia.permissions.ai_assistant_can_create_message"
AI_ASSISTANT_CAN_UPDATE_MESSAGE_FN = "saia.permissions.ai_assistant_can_create_message"
AI_ASSISTANT_CAN_DELETE_MESSAGE_FN = "saia.permissions.ai_assistant_can_create_message"
AI_ASSISTANT_CAN_RUN_ASSISTANT = "saia.permissions.ai_assistant_can_run_assistant"

# ==================== AI ASSISTANT CONFIGURATION ====================

# Companies that should use the hybrid assistant (knowledge + database)
HYBRID_ASSISTANT_COMPANIES = ['wazen', 'premium_customer']

# Company-specific configurations
COMPANY_CONFIGS = {
    'wazen': {
        'use_hybrid_assistant': True,
        'knowledge_search_limit': 5,
        'enable_database_access': False,  # Hybrid assistant is knowledge-only for security
        'default_language': 'ar',
        'cache_timeout': 300,  # 5 minutes
    },
    'default': {
        'use_hybrid_assistant': False,
        'knowledge_search_limit': 10,
        'enable_database_access': True,
        'default_language': 'en',
        'cache_timeout': 600,  # 10 minutes
    }
}

# AI Assistant Security Settings
AI_ASSISTANT_SECURITY = {
    'max_query_length': 500,
    'rate_limit_per_minute': 30,
    'enable_audit_logging': True,
    'sanitize_inputs': True,
}